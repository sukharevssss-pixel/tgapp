import React, { useEffect, useState } from "react";

export default function Polls({ user, apiRoot }) {
  const [polls, setPolls] = useState([]);
  const [question, setQuestion] = useState("");
  const [optionsText, setOptionsText] = useState(""); // –í–∞—Ä–∏–∞–Ω—Ç—ã, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
  const [betAmount, setBetAmount] = useState(100);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
  const fetchPolls = async () => {
    try {
      const res = await fetch(`${apiRoot}/api/polls`);
      if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–ø—Ä–æ—Å–æ–≤");
      const data = await res.json();
      setPolls(data || []);
    } catch (e) {
      console.error(e);
      setError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–ø—Ä–æ—Å—ã.");
    }
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–ø—Ä–æ—Å—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    fetchPolls();
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞
  const createPoll = async () => {
    setError("");
    const opts = optionsText.split("\n").map(s => s.trim()).filter(Boolean);

    if (!question || opts.length < 2) {
      setError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏ –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞.");
      return;
    }
    if (!user || !user.telegram_id) {
      setError("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.");
      return;
    }

    setLoading(true);
    try {
      const res = await fetch(`${apiRoot}/api/polls`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          telegram_id: user.telegram_id,
          question,
          options: opts,
          bet_amount: Number(betAmount)
        })
      });

      if (!res.ok) {
        const txt = await res.text();
        throw new Error(txt || "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞");
      }

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–ø—Ä–æ—Å–æ–≤
      setQuestion("");
      setOptionsText("");
      setBetAmount(100);
      fetchPolls();

    } catch (e) {
      setError(e.message);
    } finally {
      setLoading(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏
  const placeBet = async (poll_id, option_id) => {
    setError("");
    if (!user || !user.telegram_id) {
      setError("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      return;
    }

    try {
      const res = await fetch(`${apiRoot}/api/bet`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          telegram_id: user.telegram_id,
          poll_id,
          option_id
        })
      });

      if (!res.ok) {
        const jd = await res.json();
        throw new Error(jd.detail || "–û—à–∏–±–∫–∞ —Å—Ç–∞–≤–∫–∏");
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
      fetchPolls();

    } catch (e) {
      setError(e.message);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –æ–ø—Ä–æ—Å–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è)
  const closePoll = async (poll_id, winning_option_id) => {
    setError("");
    if (!user || !user.telegram_id) {
      setError("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      return;
    }

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
    if (!window.confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –æ–ø—Ä–æ—Å —Å —ç—Ç–∏–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.")) {
      return;
    }

    try {
      const res = await fetch(`${apiRoot}/api/polls/close`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          telegram_id: user.telegram_id, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ID –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
          poll_id,
          winning_option_id
        })
      });

      if (!res.ok) {
        const jd = await res.json();
        throw new Error(jd.detail || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–ø—Ä–æ—Å–∞");
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—ã–π –æ–ø—Ä–æ—Å –∏—Å—á–µ–∑
      fetchPolls();

    } catch (e) {
      setError(e.message);
    }
  };

  return (
    <div>
      <h2>–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å</h2>
      <div className="form-row">
        <input
          className="input"
          placeholder="–í–æ–ø—Ä–æ—Å"
          value={question}
          onChange={e => setQuestion(e.target.value)}
        />
        <input
          type="number"
          className="input"
          style={{ maxWidth: 120 }}
          value={betAmount}
          onChange={e => setBetAmount(e.target.value)}
        />
      </div>
      <div className="form-row">
        <textarea
          className="input"
          rows={3}
          placeholder="–ö–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏"
          value={optionsText}
          onChange={e => setOptionsText(e.target.value)}
        />
      </div>
      <div style={{ display: "flex", gap: 8, marginBottom: 12, alignItems: "center" }}>
        <button className="btn" onClick={createPoll} disabled={loading}>
          {loading ? "–°–æ–∑–¥–∞–Ω–∏–µ..." : "–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å"}
        </button>
        <div className="small">–°—Ç–∞–≤–∫–∞ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞: {betAmount} –º–æ–Ω–µ—Ç</div>
      </div>
      {error && <div className="error">{error}</div>}

      <hr style={{ margin: "20px 0" }} />

      <h2>–ê–∫—Ç–∏–≤–Ω—ã–µ –æ–ø—Ä–æ—Å—ã</h2>
      {polls.length === 0 && <div className="small">–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ–ø—Ä–æ—Å–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π!</div>}
      
      {polls.map(p => (
        <div key={p.id} className="poll">
          <div style={{ display: "flex", justifyContent: "space-between", alignItems: "center" }}>
            <div><strong>{p.question}</strong></div>
            <div className="small">–°—Ç–∞–≤–∫–∞: {p.bet_amount} | ID —Å–æ–∑–¥–∞—Ç–µ–ª—è: {p.creator_id}</div>
          </div>
          <div style={{ marginTop: 8 }}>
            {p.options && p.options.map(opt => (
              <div key={opt.id} className="option">
                <div>{opt.option_text}</div>
                <div style={{ display: "flex", gap: 8, alignItems: "center" }}>
                  <div className="small">–í—Å–µ–≥–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {opt.total_bet}</div>
                  
                  {/* –õ–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ */}
                  {user && user.telegram_id === p.creator_id ? (
                    // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî —Å–æ–∑–¥–∞—Ç–µ–ª—å, –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
                    <button className="btn-admin" title="–í—ã–±—Ä–∞—Ç—å –∫–∞–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏ –∑–∞–∫—Ä—ã—Ç—å –æ–ø—Ä–æ—Å" onClick={() => closePoll(p.id, opt.id)}>
                      üëë –ü–æ–±–µ–¥–∏—Ç–µ–ª—å
                    </button>
                  ) : (
                    // –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è —Å—Ç–∞–≤–∫–∏
                    <button className="btn" onClick={() => placeBet(p.id, opt.id)}>
                      –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É
                    </button>
                  )}
                </div>
              </div>
            ))}
          </div>
        </div>
      ))}
    </div>
  );
}
