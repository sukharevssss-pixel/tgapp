import React, { useEffect, useState } from "react";

export default function Polls({ user, apiRoot }) {
  const [polls, setPolls] = useState([]);
  const [question, setQuestion] = useState("");
  const [optionsText, setOptionsText] = useState("");
  
  // ‚ú® –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
  const [minBetAmount, setMinBetAmount] = useState(100);
  
  // ‚ú® –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—É–º–º —Å—Ç–∞–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–ø—Ä–æ—Å–∞
  const [betAmounts, setBetAmounts] = useState({});

  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");

  const fetchPolls = async () => { /* ... –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ... */ };
  useEffect(() => { fetchPolls(); }, []);

  const handleBetAmountChange = (pollId, value) => {
    setBetAmounts(prev => ({
      ...prev,
      [pollId]: Number(value)
    }));
  };

  const createPoll = async () => {
    // ...
    // ‚ú® –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤–æ–µ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    const res = await fetch(`${apiRoot}/api/polls`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
            telegram_id: user.telegram_id,
            question,
            options: opts,
            min_bet_amount: Number(minBetAmount) // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º min_bet_amount
        })
    });
    // ...
  };

  // ‚ú® –§—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç amount
  const placeBet = async (poll_id, option_id, amount) => {
    setError("");
    const poll = polls.find(p => p.id === poll_id);
    if (!poll) return;

    if (amount < poll.min_bet_amount) {
      setError(`–°—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ ${poll.min_bet_amount}`);
      return;
    }
    // ...
    const res = await fetch(`${apiRoot}/api/bet`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
            telegram_id: user.telegram_id,
            poll_id,
            option_id,
            amount // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏
        })
    });
    // ...
  };

  const closePoll = async (poll_id, winning_option_id) => { /* ... –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ... */ };

  return (
    <div>
      <h2>–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å</h2>
      <div className="form-row">
        <input className="input" placeholder="–í–æ–ø—Ä–æ—Å" value={question} onChange={e => setQuestion(e.target.value)} />
        {/* ‚ú® –ò–∑–º–µ–Ω—è–µ–º –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏ */}
        <input
          type="number"
          className="input"
          style={{ maxWidth: 140 }}
          value={minBetAmount}
          onChange={e => setMinBetAmount(e.target.value)}
        />
      </div>
      {/* ... –æ—Å—Ç–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ... */}
      <div className="small">–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {minBetAmount} –º–æ–Ω–µ—Ç</div>

      <hr style={{ margin: "20px 0" }} />

      <h2>–ê–∫—Ç–∏–≤–Ω—ã–µ –æ–ø—Ä–æ—Å—ã</h2>
      {polls.map(p => {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –æ–ø—Ä–æ—Å–∞
        const currentBetAmount = betAmounts[p.id] || p.min_bet_amount;
        return (
          <div key={p.id} className="poll">
            <div style={{ display: "flex", justifyContent: "space-between", alignItems: "center" }}>
              <div><strong>{p.question}</strong></div>
              {/* ‚ú® –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É */}
              <div className="small">–ú–∏–Ω. —Å—Ç–∞–≤–∫–∞: {p.min_bet_amount}</div>
            </div>
            <div style={{ marginTop: 8 }}>
              {p.options && p.options.map(opt => (
                <div key={opt.id} className="option">
                  <div>{opt.option_text} <span className="small">({opt.total_bet} –º–æ–Ω–µ—Ç)</span></div>
                  {/* ‚ú® –ò–ó–ú–ï–ù–ï–ù–ò–ï: –¢–µ–ø–µ—Ä—å –∑–¥–µ—Å—å —Ñ–æ—Ä–º–∞ –¥–ª—è —Å—Ç–∞–≤–∫–∏, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∫–Ω–æ–ø–∫–∞ */}
                  <div style={{ display: "flex", gap: 8, alignItems: "center" }}>
                    <input
                      type="number"
                      className="input"
                      style={{ maxWidth: '80px', textAlign: 'right' }}
                      value={currentBetAmount}
                      onChange={(e) => handleBetAmountChange(p.id, e.target.value)}
                      placeholder={`>${p.min_bet_amount}`}
                    />
                    <button className="btn" onClick={() => placeBet(p.id, opt.id, currentBetAmount)}>
                      –ü–æ—Å—Ç–∞–≤–∏—Ç—å
                    </button>
                    {user && user.telegram_id === p.creator_id && (
                      <button className="btn-admin" onClick={() => closePoll(p.id, opt.id)}>üëë</button>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </div>
        );
      })}
    </div>
  );
}