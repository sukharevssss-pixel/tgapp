import React, { useEffect, useState } from "react";
import Polls from "./tabs/Polls";
import Chests from "./tabs/Chests";
import Rating from "./tabs/Rating";
import "./App.css";
import DebugUser from "./DebugUser";

const API_URL = "https://tgapp-4ugf.onrender.com"; // –≤–∞—à backend

function TabButton({ children, active, onClick }) {
  return (
    <button
      className={`tab-button ${active ? "active" : ""}`}
      onClick={onClick}
    >
      {children}
    </button>
  );
}

export default function App() {
  const [tab, setTab] = useState("polls");
  const [user, setUser] = useState(null);
  const [loadingUser, setLoadingUser] = useState(true);
  // –î–æ–±–∞–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
  const [debugInfo, setDebugInfo] = useState(null);

  useEffect(() => {
    const initUser = async (telegram_id, username) => {
      try {
        const res = await fetch(`${API_URL}/api/auth`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ telegram_id, username }),
        });

        const data = await res.json();
        if (data?.ok && data.user) {
          setUser(data.user);
        } else {
          console.warn("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:", data);
          setDebugInfo({ error: "–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É", details: data });
        }
      } catch (e) {
        console.error("üî• –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ api/auth:", e);
        setDebugInfo({ error: "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ api/auth", details: e.message });
      } finally {
        setLoadingUser(false);
      }
    };

    // --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

    // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram WebApp
    const tg = window.Telegram?.WebApp;

    // –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
    console.log("window.Telegram.WebApp:", tg);

    if (tg && tg.initDataUnsafe?.user) {
      // ‚úÖ –ú—ã –≤–Ω—É—Ç—Ä–∏ Telegram, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      console.log("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ Telegram.");
      const u = tg.initDataUnsafe.user;
      setDebugInfo({ message: "–î–∞–Ω–Ω—ã–µ –∏–∑ Telegram WebApp", user: u });
      initUser(u.id, u.username || u.first_name || "user");
    } else {
      // ‚ùå –ú—ã –≤ –æ–±—ã—á–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      console.log("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ (—Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏).");
      setDebugInfo({ error: "‚ùå Telegram.WebApp –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å." });
      // fallback –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ (–ù–ï –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞!)
      initUser(1, "testuser");
    }

    // --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
  }, []);

  if (loadingUser) {
    return <div className="container">‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...</div>;
  }

  if (!user) {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞
    return (
      <div className="container">
        ‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
        {debugInfo?.error && <pre style={{ whiteSpace: "pre-wrap", wordBreak: "break-all" }}>{JSON.stringify(debugInfo, null, 2)}</pre>}
      </div>
    );
  }

  return (
    <div className="container">
      <h1>TG MiniApp ‚Äî Demo</h1>

      {/* üîç –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –±–ª–æ–∫ —Å –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π */}
      {debugInfo && (
        <div style={{ background: "#333", padding: '10px', borderRadius: '8px', margin: '10px 0' }}>
          <pre style={{ whiteSpace: "pre-wrap", wordBreak: "break-all", color: 'white' }}>
            {JSON.stringify(debugInfo, null, 2)}
          </pre>
        </div>
      )}
      
      {/* –í–∞—à DebugUser –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ç–æ–∂–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å */}
      {/* <DebugUser /> */}

      <div className="profile-box">
        üë§ <b>{user.username}</b> | üÜî {user.telegram_id} | üí∞ {user.balance} –º–æ–Ω–µ—Ç
      </div>

      <div className="tab-buttons">
        <TabButton active={tab === "polls"} onClick={() => setTab("polls")}>
          üìä –û–ø—Ä–æ—Å—ã
        </TabButton>
        <TabButton active={tab === "chests"} onClick={() => setTab("chests")}>
          üéÅ –°—É–Ω–¥—É–∫–∏
        </TabButton>
        <TabButton active={tab === "rating"} onClick={() => setTab("rating")}>
          üèÜ –†–µ–π—Ç–∏–Ω–≥
        </TabButton>
      </div>

      <div className="content">
        {tab === "polls" && <Polls user={user} apiRoot={API_URL} />}
        {tab === "chests" && <Chests user={user} apiRoot={API_URL} />}
        {tab === "rating" && <Rating apiRoot={API_URL} />}
      </div>
    </div>
  );
}
