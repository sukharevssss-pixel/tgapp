import asyncio
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from fastapi.middleware.cors import CORSMiddleware
import db
import traceback
import bot 

app = FastAPI(title="TG MiniApp Backend")

# --- CORS ---
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# --- Pydantic-—Å—Ö–µ–º—ã ---
class InitPayload(BaseModel):
    telegram_id: int
    username: str | None = None

class PlaceBetPayload(BaseModel):
    telegram_id: int
    poll_id: int
    option_id: int
    amount: int

class OpenChestPayload(BaseModel):
    telegram_id: int
    chest_id: int

# --- –°–•–ï–ú–´ CreatePollPayload –∏ ClosePollPayload –£–î–ê–õ–ï–ù–´, –¢–ê–ö –ö–ê–ö –û–ù–ò –ë–û–õ–¨–®–ï –ù–ï –ù–£–ñ–ù–´ ---

# --- Startup ---
@app.on_event("startup")
def startup():
    print("üöÄ Startup: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    db.init_db()
    asyncio.create_task(bot.start_bot())
    print("ü§ñ –ë–æ—Ç –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω—ã...")


# --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ---
@app.post("/api/auth")
async def api_auth(payload: InitPayload):
    try:
        db.ensure_user(payload.telegram_id, payload.username)
        user = db.get_user(payload.telegram_id)
        if not user:
            raise HTTPException(status_code=500, detail="User creation failed")
        return {"ok": True, "user": user}
    except Exception as e:
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=f"Internal error: {str(e)}")

@app.get("/api/me/{telegram_id}")
async def api_me(telegram_id: int):
    user = db.get_user(telegram_id)
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    return user


# --- –û–ø—Ä–æ—Å—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è –∏ —Å—Ç–∞–≤–æ–∫ –∏–∑ Mini App) ---

# --- –≠–ù–î–ü–û–ò–ù–¢ POST /api/polls –£–î–ê–õ–ï–ù, –¢–ê–ö –ö–ê–ö –û–ü–†–û–°–´ –°–û–ó–î–ê–Æ–¢–°–Ø –ß–ï–†–ï–ó –ë–û–¢–ê ---

@app.get("/api/polls")
async def api_list_polls():
    return db.list_polls(open_only=True)

@app.get("/api/polls/{poll_id}")
async def api_get_poll(poll_id: int):
    poll = db.get_poll(poll_id)
    if not poll:
        raise HTTPException(status_code=404, detail="Poll not found")
    return poll

@app.post("/api/bet")
async def api_place_bet(payload: PlaceBetPayload):
    try:
        res = db.place_bet(payload.telegram_id, payload.poll_id, payload.option_id, payload.amount)
        if not res.get("ok"):
            raise HTTPException(status_code=400, detail=res.get("error"))
        return res
    except Exception as e:
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=f"Internal error: {str(e)}")

# --- –≠–ù–î–ü–û–ò–ù–¢ POST /api/polls/close –£–î–ê–õ–ï–ù, –¢–ê–ö –ö–ê–ö –û–ü–†–û–°–´ –ó–ê–ö–†–´–í–ê–Æ–¢–°–Ø –ß–ï–†–ï–ó –ë–û–¢–ê ---

# --- –°—É–Ω–¥—É–∫–∏ ---
@app.get("/api/chests")
async def api_chests():
    return db.list_chests()

@app.post("/api/chests/open")
async def api_open_chest(payload: OpenChestPayload):
    try:
        res = db.open_chest(payload.telegram_id, payload.chest_id)
        if not res.get("ok"):
            raise HTTPException(status_code=400, detail=res.get("error"))
        return res
    except Exception as e:
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=f"Internal error: {str(e)}")


# --- –†–µ–π—Ç–∏–Ω–≥ ---
@app.get("/api/rating")
async def api_rating():
    return db.get_rating()